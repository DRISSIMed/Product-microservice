---
name: Build, Push and Deploy to DigitalOcean k3s
on:
  push:
    branches:
      - master
    tags:
      - v*
jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
      - name: Run Unit Tests with Maven
        run: mvn test

      - name: Run SonarQube Scan with Maven
        run: |
          mvn verify \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=DRISSIMed_Product-microservice \
            -Dsonar.organization=drissimed \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Determine image tag
        id: image_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: >
          IMAGE=${{ secrets.DOCKER_USERNAME }}/product-microservice:${{
          steps.image_tag.outputs.tag }}

          docker build -t $IMAGE .
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/product-microservice:${{
            steps.image_tag.outputs.tag }}
          format: table
          exit-code: 0
          ignore-unfixed: false
          vuln-type: os,library
      - name: Push Docker image
        run: >
          IMAGE=${{ secrets.DOCKER_USERNAME }}/product-microservice:${{
          steps.image_tag.outputs.tag }}

          docker push $IMAGE
      - name: Set up KUBECONFIG for k3s
        run: >
          mkdir -p ~/.kube

          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > ~/.kube/config
      - name: Show files in k8s
        run: ls -l k8s/
      - name: Deploy PostgreSQL to Kubernetes
        run: |
          kubectl apply -f k8s/postgres-secret.yaml
          kubectl apply -f k8s/postgres-pvc.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
      - name: Apply Deployment YAML (create if missing)
        run: >
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME
          }}/product-microservice:${{ steps.image_tag.outputs.tag }}|"
          k8s/deployment.yaml

          kubectl apply -f k8s/deployment.yaml
      - name: Update Deployment Image
        run: >
          kubectl set image deployment/product-microservice product-microservice=${{
          secrets.DOCKER_USERNAME }}/product-microservice:${{
          steps.image_tag.outputs.tag }}
      - name: Restart Deployment
        run: kubectl rollout restart deployment/product-microservice
      - name: Apply Kubernetes Service
        run: kubectl apply -f k8s/service.yaml
