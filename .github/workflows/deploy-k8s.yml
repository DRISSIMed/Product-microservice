name: Build, Push and Deploy to DigitalOcean k3s

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Determine image tag
        id: image_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/product-microservice:${{ steps.image_tag.outputs.tag }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Set up KUBECONFIG for k3s
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > ~/.kube/config

      - name: Show files in k8s
        run: ls -l k8s/

      - name: Deploy PostgreSQL to Kubernetes
        run: |
          kubectl apply -f k8s/postgres-secret.yaml
          kubectl apply -f k8s/postgres-pvc.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml

      - name: Apply Deployment YAML (create if missing)
        run: |
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/product-microservice:${{ steps.image_tag.outputs.tag }}|" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml   

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/product-microservice product-microservice=${{ secrets.DOCKER_USERNAME }}/product-microservice:${{ steps.image_tag.outputs.tag }}

      - name: Apply Kubernetes Service
        run: kubectl apply -f k8s/service.yaml


